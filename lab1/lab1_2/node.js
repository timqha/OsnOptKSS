var
    sum = function(num){ // функция для получения суммы цифр
        var
            str = num.toString(),
            arr = str.split(''),
            s = 0;
        arr.forEach(function(value){ s+=parseInt(value); });
        return s;
    },
    luckyTickets = function(len){
        var
            lenMiddle = len/2,
            maxSize = Math.pow(10,lenMiddle),
            result = 0;
        for(var i=0;i<maxSize;i++)
            for(j=0;j<maxSize;j++)
                if( sum(i) == sum(j) ) result++;
        return result;
    };

console.log( luckyTickets(8) ); //  4 816 030

//
//Выразим частичное решение в виде M(n, k) — число сочетаний из n цифр, дающих в сумме k (похоже, именно она приведена в тексте поста). Предположим, мы знаем ответ для задачи размера n — 1. Найдём решение для задачи размера n.
//
//    Половина билетика выглядит следующим образом:
//
//    [n - 1 цифра] d
//
//Нам нужно найти все такие d, что новая сумма равна k.
//
//M(n, k) = [Sum; 0 <= d <= 9; M(n - 1, k - d)]
//
//Далее нужно заметить, что верхняя граница для k всегда ограничена сверху 9 * n, и ответ
//
//S(n) = [Sum; 0 <= k <= 9*n; M(n, k) * M(n, k)]
//
//M(n, k) возводим в квадрат потому, что одна и таже сумма встречается в двух половинках билета.
//
//    Зная, что M(1, k) = 1 для 0 <= k <= 9, имеем основание для нашей рекуррентной формулы.
//
//    Надеюсь, нигде не ошибся.